# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ChapterInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_position_ticks': 'int',
        'name': 'str',
        'image_tag': 'str',
        'marker_type': 'MarkerType',
        'chapter_index': 'int'
    }

    attribute_map = {
        'start_position_ticks': 'StartPositionTicks',
        'name': 'Name',
        'image_tag': 'ImageTag',
        'marker_type': 'MarkerType',
        'chapter_index': 'ChapterIndex'
    }

    def __init__(self, start_position_ticks=None, name=None, image_tag=None, marker_type=None, chapter_index=None):  # noqa: E501
        """ChapterInfo - a model defined in Swagger"""  # noqa: E501
        self._start_position_ticks = None
        self._name = None
        self._image_tag = None
        self._marker_type = None
        self._chapter_index = None
        self.discriminator = None
        if start_position_ticks is not None:
            self.start_position_ticks = start_position_ticks
        if name is not None:
            self.name = name
        if image_tag is not None:
            self.image_tag = image_tag
        if marker_type is not None:
            self.marker_type = marker_type
        if chapter_index is not None:
            self.chapter_index = chapter_index

    @property
    def start_position_ticks(self):
        """Gets the start_position_ticks of this ChapterInfo.  # noqa: E501

        The start position ticks.  # noqa: E501

        :return: The start_position_ticks of this ChapterInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_position_ticks

    @start_position_ticks.setter
    def start_position_ticks(self, start_position_ticks):
        """Sets the start_position_ticks of this ChapterInfo.

        The start position ticks.  # noqa: E501

        :param start_position_ticks: The start_position_ticks of this ChapterInfo.  # noqa: E501
        :type: int
        """

        self._start_position_ticks = start_position_ticks

    @property
    def name(self):
        """Gets the name of this ChapterInfo.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this ChapterInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChapterInfo.

        The name.  # noqa: E501

        :param name: The name of this ChapterInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def image_tag(self):
        """Gets the image_tag of this ChapterInfo.  # noqa: E501


        :return: The image_tag of this ChapterInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this ChapterInfo.


        :param image_tag: The image_tag of this ChapterInfo.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def marker_type(self):
        """Gets the marker_type of this ChapterInfo.  # noqa: E501


        :return: The marker_type of this ChapterInfo.  # noqa: E501
        :rtype: MarkerType
        """
        return self._marker_type

    @marker_type.setter
    def marker_type(self, marker_type):
        """Sets the marker_type of this ChapterInfo.


        :param marker_type: The marker_type of this ChapterInfo.  # noqa: E501
        :type: MarkerType
        """

        self._marker_type = marker_type

    @property
    def chapter_index(self):
        """Gets the chapter_index of this ChapterInfo.  # noqa: E501


        :return: The chapter_index of this ChapterInfo.  # noqa: E501
        :rtype: int
        """
        return self._chapter_index

    @chapter_index.setter
    def chapter_index(self, chapter_index):
        """Sets the chapter_index of this ChapterInfo.


        :param chapter_index: The chapter_index of this ChapterInfo.  # noqa: E501
        :type: int
        """

        self._chapter_index = chapter_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChapterInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChapterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
