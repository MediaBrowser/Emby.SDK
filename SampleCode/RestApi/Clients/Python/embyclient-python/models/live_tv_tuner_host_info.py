# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class LiveTvTunerHostInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'type': 'str',
        'device_id': 'str',
        'friendly_name': 'str',
        'setup_url': 'str',
        'import_favorites_only': 'bool',
        'prefer_epg_channel_images': 'bool',
        'prefer_epg_channel_numbers': 'bool',
        'allow_hw_transcoding': 'bool',
        'allow_mapping_by_number': 'bool',
        'import_guide_data': 'bool',
        'source': 'str',
        'tuner_count': 'int',
        'user_agent': 'str',
        'referrer': 'str',
        'provider_options': 'str',
        'data_version': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'url': 'Url',
        'type': 'Type',
        'device_id': 'DeviceId',
        'friendly_name': 'FriendlyName',
        'setup_url': 'SetupUrl',
        'import_favorites_only': 'ImportFavoritesOnly',
        'prefer_epg_channel_images': 'PreferEpgChannelImages',
        'prefer_epg_channel_numbers': 'PreferEpgChannelNumbers',
        'allow_hw_transcoding': 'AllowHWTranscoding',
        'allow_mapping_by_number': 'AllowMappingByNumber',
        'import_guide_data': 'ImportGuideData',
        'source': 'Source',
        'tuner_count': 'TunerCount',
        'user_agent': 'UserAgent',
        'referrer': 'Referrer',
        'provider_options': 'ProviderOptions',
        'data_version': 'DataVersion'
    }

    def __init__(self, id=None, url=None, type=None, device_id=None, friendly_name=None, setup_url=None, import_favorites_only=None, prefer_epg_channel_images=None, prefer_epg_channel_numbers=None, allow_hw_transcoding=None, allow_mapping_by_number=None, import_guide_data=None, source=None, tuner_count=None, user_agent=None, referrer=None, provider_options=None, data_version=None):  # noqa: E501
        """LiveTvTunerHostInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._type = None
        self._device_id = None
        self._friendly_name = None
        self._setup_url = None
        self._import_favorites_only = None
        self._prefer_epg_channel_images = None
        self._prefer_epg_channel_numbers = None
        self._allow_hw_transcoding = None
        self._allow_mapping_by_number = None
        self._import_guide_data = None
        self._source = None
        self._tuner_count = None
        self._user_agent = None
        self._referrer = None
        self._provider_options = None
        self._data_version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if type is not None:
            self.type = type
        if device_id is not None:
            self.device_id = device_id
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if setup_url is not None:
            self.setup_url = setup_url
        if import_favorites_only is not None:
            self.import_favorites_only = import_favorites_only
        if prefer_epg_channel_images is not None:
            self.prefer_epg_channel_images = prefer_epg_channel_images
        if prefer_epg_channel_numbers is not None:
            self.prefer_epg_channel_numbers = prefer_epg_channel_numbers
        if allow_hw_transcoding is not None:
            self.allow_hw_transcoding = allow_hw_transcoding
        if allow_mapping_by_number is not None:
            self.allow_mapping_by_number = allow_mapping_by_number
        if import_guide_data is not None:
            self.import_guide_data = import_guide_data
        if source is not None:
            self.source = source
        if tuner_count is not None:
            self.tuner_count = tuner_count
        if user_agent is not None:
            self.user_agent = user_agent
        if referrer is not None:
            self.referrer = referrer
        if provider_options is not None:
            self.provider_options = provider_options
        if data_version is not None:
            self.data_version = data_version

    @property
    def id(self):
        """Gets the id of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The id of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveTvTunerHostInfo.


        :param id: The id of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The url of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LiveTvTunerHostInfo.


        :param url: The url of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """Gets the type of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The type of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LiveTvTunerHostInfo.


        :param type: The type of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def device_id(self):
        """Gets the device_id of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The device_id of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this LiveTvTunerHostInfo.


        :param device_id: The device_id of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The friendly_name of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this LiveTvTunerHostInfo.


        :param friendly_name: The friendly_name of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def setup_url(self):
        """Gets the setup_url of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The setup_url of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._setup_url

    @setup_url.setter
    def setup_url(self, setup_url):
        """Sets the setup_url of this LiveTvTunerHostInfo.


        :param setup_url: The setup_url of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._setup_url = setup_url

    @property
    def import_favorites_only(self):
        """Gets the import_favorites_only of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The import_favorites_only of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._import_favorites_only

    @import_favorites_only.setter
    def import_favorites_only(self, import_favorites_only):
        """Sets the import_favorites_only of this LiveTvTunerHostInfo.


        :param import_favorites_only: The import_favorites_only of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._import_favorites_only = import_favorites_only

    @property
    def prefer_epg_channel_images(self):
        """Gets the prefer_epg_channel_images of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The prefer_epg_channel_images of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_epg_channel_images

    @prefer_epg_channel_images.setter
    def prefer_epg_channel_images(self, prefer_epg_channel_images):
        """Sets the prefer_epg_channel_images of this LiveTvTunerHostInfo.


        :param prefer_epg_channel_images: The prefer_epg_channel_images of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._prefer_epg_channel_images = prefer_epg_channel_images

    @property
    def prefer_epg_channel_numbers(self):
        """Gets the prefer_epg_channel_numbers of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The prefer_epg_channel_numbers of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_epg_channel_numbers

    @prefer_epg_channel_numbers.setter
    def prefer_epg_channel_numbers(self, prefer_epg_channel_numbers):
        """Sets the prefer_epg_channel_numbers of this LiveTvTunerHostInfo.


        :param prefer_epg_channel_numbers: The prefer_epg_channel_numbers of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._prefer_epg_channel_numbers = prefer_epg_channel_numbers

    @property
    def allow_hw_transcoding(self):
        """Gets the allow_hw_transcoding of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The allow_hw_transcoding of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_hw_transcoding

    @allow_hw_transcoding.setter
    def allow_hw_transcoding(self, allow_hw_transcoding):
        """Sets the allow_hw_transcoding of this LiveTvTunerHostInfo.


        :param allow_hw_transcoding: The allow_hw_transcoding of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._allow_hw_transcoding = allow_hw_transcoding

    @property
    def allow_mapping_by_number(self):
        """Gets the allow_mapping_by_number of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The allow_mapping_by_number of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mapping_by_number

    @allow_mapping_by_number.setter
    def allow_mapping_by_number(self, allow_mapping_by_number):
        """Sets the allow_mapping_by_number of this LiveTvTunerHostInfo.


        :param allow_mapping_by_number: The allow_mapping_by_number of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._allow_mapping_by_number = allow_mapping_by_number

    @property
    def import_guide_data(self):
        """Gets the import_guide_data of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The import_guide_data of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._import_guide_data

    @import_guide_data.setter
    def import_guide_data(self, import_guide_data):
        """Sets the import_guide_data of this LiveTvTunerHostInfo.


        :param import_guide_data: The import_guide_data of this LiveTvTunerHostInfo.  # noqa: E501
        :type: bool
        """

        self._import_guide_data = import_guide_data

    @property
    def source(self):
        """Gets the source of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The source of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LiveTvTunerHostInfo.


        :param source: The source of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def tuner_count(self):
        """Gets the tuner_count of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The tuner_count of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: int
        """
        return self._tuner_count

    @tuner_count.setter
    def tuner_count(self, tuner_count):
        """Sets the tuner_count of this LiveTvTunerHostInfo.


        :param tuner_count: The tuner_count of this LiveTvTunerHostInfo.  # noqa: E501
        :type: int
        """

        self._tuner_count = tuner_count

    @property
    def user_agent(self):
        """Gets the user_agent of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The user_agent of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this LiveTvTunerHostInfo.


        :param user_agent: The user_agent of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def referrer(self):
        """Gets the referrer of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The referrer of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this LiveTvTunerHostInfo.


        :param referrer: The referrer of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def provider_options(self):
        """Gets the provider_options of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The provider_options of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider_options

    @provider_options.setter
    def provider_options(self, provider_options):
        """Sets the provider_options of this LiveTvTunerHostInfo.


        :param provider_options: The provider_options of this LiveTvTunerHostInfo.  # noqa: E501
        :type: str
        """

        self._provider_options = provider_options

    @property
    def data_version(self):
        """Gets the data_version of this LiveTvTunerHostInfo.  # noqa: E501


        :return: The data_version of this LiveTvTunerHostInfo.  # noqa: E501
        :rtype: int
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this LiveTvTunerHostInfo.


        :param data_version: The data_version of this LiveTvTunerHostInfo.  # noqa: E501
        :type: int
        """

        self._data_version = data_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveTvTunerHostInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveTvTunerHostInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
